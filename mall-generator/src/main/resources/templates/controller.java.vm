package ${package.Controller};

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import java.util.List;
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;
import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * @auther ${author}
 * @create ${cfg.dateTime}
 * @describe $!{table.comment}前端控制器
 */
@Api(tags = "$!{table.comment}模块")
@Slf4j
@RestController
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@RequiredArgsConstructor(onConstructor = @_(@Autowired))
public class ${table.controllerName} {

    private final ${table.serviceName} ${table.serviceName};

    @ApiOperation(value = "分页列表查询", notes = "分页列表查询")
    @GetMapping(value = "/page")
    public ResponseEntity<?> page(${entity} ${entity},
                                   @RequestParam(name = "pageNo", defaultValue = "1") Integer pageNo,
                                   @RequestParam(name = "pageSize", defaultValue = "10") Integer pageSize) {
        log.info("${entity}分页列表查询开始:${entity}={}", ${entity}.toString());

        log.info("${entity}分页列表查询结束");
        return ResponseEntity.ok();
    }

    @ApiOperation(value = "根据id查询", notes = "根据id查询")
    @GetMapping(value = "/get")
    public ResponseEntity<?> get(@RequestParam(name = "id", required = true) Integer id){

        log.info("${entity}根据id查询开始:id={}", id);

        log.info("${entity}根据id查询结束");
        return ResponseEntity.ok();
    }

    @ApiOperation(value = "新增", notes = "新增")
    @PostMapping(value = "/save")
    public ResponseEntity<?> save(@RequestBody ${entity} ${entity}) {

        log.info("${entity}新增开始:${entity}={}", ${entity}.toString());

        log.info("${entity}新增结束");
        return ResponseEntity.ok();
    }


    @ApiOperation(value = "修改", notes = "修改")
    @PutMapping(value = "/edit")
    public ResponseEntity<?> edit(@RequestBody ${entity} ${entity}) {
         log.info("${entity}修改开始:${entity}={}", ${entity}.toString());

         log.info("${entity}修改结束");
         return ResponseEntity.ok();
    }

    @ApiOperation(value = "删除", notes = "删除")
    @DeleteMapping(value = "/del")
    public ResponseEntity<?> del(@RequestParam(name = "id", required = true) Integer id){
        log.info("${entity}删除开始:id={}", id);

        log.info("${entity}删除结束");
        return ResponseEntity.ok();
    }

    @ApiOperation(value = "批量删除", notes = "批量删除")
    @DeleteMapping(value = "/delAll")
    public ResponseEntity<?> delAll(@RequestParam(name = "ids", required = true) List<Integer> ids){
        log.info("${entity}批量删除开始:ids={}", ids.toString());

        log.info("${entity}批量删除结束");
        return ResponseEntity.ok();
    }

}